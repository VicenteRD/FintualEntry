import java.time.LocalDate;
import java.util.LinkedList;
import java.util.List;

import static java.time.temporal.ChronoUnit.DAYS;

public class Portfolio {

    private final List<Stock> stocks = new LinkedList<>();

    public Portfolio() {
        // Here you can add all the stock simulations you want to the portfolio.
        stocks.add(new Stock(StockSimulationType.RANDOM));
        stocks.add(new Stock(StockSimulationType.POSITIVE_LINEAR));
        stocks.add(new Stock(StockSimulationType.NEGATIVE_LINEAR));
        stocks.add(new Stock(StockSimulationType.SQUARE));
    }

    /**
     * Gives the funds available at a given date.
     *
     * @param at the date to calculate the funds for.
     * @return The funds for the given date.
     */
    public double fundsAtDate(LocalDate at) {
        return stocks.stream().mapToDouble(stock -> stock.price(at)).sum();
    }

    /**
     * Calculates the profits for a given date, based on the invested capital.
     *
     * @param startingFunds The starting investment capital.
     * @param end The finishing date of the evaluation period (exclusive).
     * @return The profits generated by the portfolio in the given period
     */
    public double profit(double startingFunds, LocalDate end) {
        return fundsAtDate(end.minusDays(1)) - startingFunds;
    }

    /**
     * Gives the annualized return rate for the investment portfolio as a decimal, 0<=r<=1,
     * for the given period.
     *
     * @param start The starting date of the evaluation period (inclusive).
     * @param end The finishing date of the evaluation period (exclusive).
     * @return The annualized return rate for the given period, as decimal.
     */
    public double annualizedReturn(LocalDate start, LocalDate end) {
        System.out.println(this);
        double startingFunds = fundsAtDate(start);
        double profit = this.profit(startingFunds, end);

        return annualizedReturn(startingFunds, profit, DAYS.between(start, end));
    }

    private double annualizedReturn(double capital, double profit, long days) {
        double returnRate = (capital + profit) / capital;
        double dayRatio = 365d / days;

        return Math.pow(returnRate, dayRatio) - 1;
    }

}
